from scipy.optimize import linprog 
import sympy as sp
def find_operator_and_split(expr_str):
    
    expr_str = ' '.join(expr_str.split())  
    
    operators = ['<=', '>=', '=', '<', '>']

    for op in operators:
        pos = expr_str.find(op)
        if pos != -1:
            lhs = expr_str[:pos].strip()
            rhs = expr_str[pos + len(op):].strip()
            return op, lhs, rhs
    
    raise ValueError("No se detectó un operador válido (<=, >=, =, <, >).")

def parse_restriccion(expr_str, variables):
    """
    Parsea una restricción flexible con cualquier formato y símbolo.
    Maneja constantes en LHS robustamente.
    Devuelve (coeficientes, b, tipo) donde tipo es 'le' (<=) o 'eq' (=).
    """
    try:
        operador, lhs_str, rhs_str = find_operator_and_split(expr_str)
        
        # Convertir < y > a <= y >=
        if operador == '<':
            operador = '<='
        elif operador == '>':
            operador = '>='
        # Parsear LHS y RHS con sympy
        lhs_expr = sp.sympify(lhs_str)
        
        # RHS debe ser constante numérica
        if rhs_str:
            rhs_expr = sp.sympify(rhs_str)
            if rhs_expr.free_symbols:  # Si RHS tiene variables, error
                raise ValueError("El lado derecho (RHS) debe ser un número constante, no una expresión con variables (ej. no 'x3 + 2').")
            rhs_val = float(rhs_expr)
        else:
            rhs_val = 0.0